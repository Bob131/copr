#!/usr/bin/env python3

import subprocess
import sys
import argparse
import rpm
import os

spec_file = rpm.ts().parseSpec('prunerepo.spec')

parser = argparse.ArgumentParser(description=spec_file.sourceHeader.summary.decode("utf-8"))

parser.add_argument('path', action='store',
                   help='local path to a yum repository')
parser.add_argument('--days', type=int, action='store', default=0, # todo
                   help='only remove packages older than DAYS (by their build date)')
parser.add_argument('--copr', type=int, action='store', default=0, # todo
                   help='additionaly remove whole copr build dirs and logs if the associated package gets deleted')
parser.add_argument('--nocreaterepo', action='store_true',
                   help='repository is not automatically recreated after deletion')
parser.add_argument('--verbose', action='store_true',
                   help='print all deleted packages (*.src.rpm, *.rpm) to stdout')
parser.add_argument('-v', '--version', action='version', version=spec_file.sourceHeader.version.decode("utf-8"),
                   help='print program version and exit')

args = parser.parse_args()


get_all_packages_cmd = [
    'dnf',
    'repoquery',
    '--disablerepo=*',
    '--repofrompath=prunerepo_query,'+os.path.abspath(args.path),
    '--repoid=prunerepo_query',
    '--enablerepo=prunerepo_query',
    '--refresh',
    '--queryformat="%{location}"',
    '--quiet',
]

get_latest_packages_cmd = get_all_packages_cmd + [ '--latest-limit=1' ]


def run_cmd(cmd):
    """
    Run given command in a subprocess
    """
    print("Executing: "+' '.join(cmd))
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = process.communicate()
    if process.returncode != 0:
        print(stderr, file=sys.stderr)
        sys.exit(1)
    return (stdout, stderr)


def get_packages(repoquery_cmd):
    """
    Get paths to packages in the repository according to given repoquery_cmd
    """
    (stdout, stderr) = run_cmd(repoquery_cmd)
    rel_package_paths = [relpath.strip('"') for relpath in stdout.decode(encoding='utf-8').split()]
    abs_package_paths = [os.path.abspath(os.path.join(args.path, relpath)) for relpath in rel_package_paths]
    return abs_package_paths


def prune_packages():
    print("Removing obsoleted packages...")
    latest_packages = get_packages(get_latest_packages_cmd)
    all_packages = get_packages(get_all_packages_cmd)
    to_remove_packages = set(all_packages) - set(latest_packages)
    removed_counter = 0
    for package in to_remove_packages:
        os.remove(package)
        if args.verbose:
            print(package)
        removed_counter += 1
    print('{} packages removed'.format(removed_counter))


def recreate_repo():
    """
    Recreate the repository by using createrepo_c
    """
    createrepo_cmd = ['/usr/bin/createrepo_c', '--database', '--update'] + [ args.path ]
    return run_cmd(createrepo_cmd)


if __name__ == '__main__':
    prune_packages()
    if not args.nocreaterepo:
        recreate_repo()
