"""empty message

Revision ID: 2fa80e062525
Revises: 2e30169e58ce
Create Date: 2013-01-14 09:04:42.768432

"""

# revision identifiers, used by Alembic.
revision = "2fa80e062525"
down_revision = "2e30169e58ce"

from alembic import op
import sqlalchemy as sa


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table("mock_chroot",
                    sa.Column("id", sa.Integer(), nullable=False),
                    sa.Column(
                        "os_release", sa.String(length=50), nullable=False),
                    sa.Column(
                        "os_version", sa.String(length=50), nullable=False),
                    sa.Column("arch", sa.String(length=50), nullable=False),
                    sa.Column("is_active", sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint("id")
                    )
    op.create_table("copr_chroot",
                    sa.Column("mock_chroot_id", sa.Integer(), nullable=False),
                    sa.Column("copr_id", sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(["copr_id"], ["copr.id"], ),
                    sa.ForeignKeyConstraint(
                        ["mock_chroot_id"], ["mock_chroot.id"], ),
                    sa.PrimaryKeyConstraint("mock_chroot_id", "copr_id")
                    )

    # transfer the data - we can"t assume how the code looks like when
    # running the migration, so do everything from scratch
    metadata = sa.MetaData()
    # just what we need of copr table
    coprs_table = sa.Table("copr", metadata, sa.Column(
        "chroots", sa.Text()), sa.Column("id", sa.Integer()))
    # get chroots
    chroots = set()
    for cs in op.get_bind().execute(sa.select([coprs_table.c.chroots])):
        chroots.update(set(cs[0].split(" ")))
    chroots = list(chroots)

    mc_table = sa.Table("mock_chroot", metadata,
                        sa.Column("id", sa.Integer(), nullable=False),
                        sa.Column(
                            "os_release", sa.String(length=50), nullable=False),
                        sa.Column(
                            "os_version", sa.String(length=50), nullable=False),
                        sa.Column(
                            "arch", sa.String(length=50), nullable=False),
                        sa.Column("is_active", sa.Boolean(), nullable=False),
                        )
    cc_table = sa.Table("copr_chroot", metadata,
                        sa.Column(
                            "mock_chroot_id", sa.Integer(), nullable=False),
                        sa.Column("copr_id", sa.Integer(), nullable=False),
                        )
    # each mock_chroot now has id of value i + 1 (not to include 0)
    for i, c in enumerate(chroots):
        sc = c.split("-")
        op.bulk_insert(mc_table, [
                       {"id": i + 1,
                        "os_release": sc[0],
                        "os_version": sc[1],
                        "arch": sc[2],
                        "is_active": True}])

    # insert proper copr_chroots for every copr
    for row in op.get_bind().execute(sa.select([coprs_table.c.id, coprs_table.c.chroots])):
        for c in row[1].split(" "):
            op.bulk_insert(
                cc_table, [{"mock_chroot_id": chroots.index(c) + 1,
                            "copr_id": row[0]}])

    if op.get_bind().dialect.name == "sqlite":
        op.rename_table("copr", "copr_1")
        op.create_table("copr",
                        sa.Column("id", sa.Integer(), nullable=False),
                        sa.Column(
                            "name", sa.String(length=100), nullable=False),
                        sa.Column("repos", sa.Text(), nullable=True),
                        sa.Column("created_on", sa.Integer(), nullable=True),
                        sa.Column("build_count", sa.Integer(), nullable=True),
                        sa.Column("owner_id", sa.Integer(), nullable=True),
                        sa.ForeignKeyConstraint(["owner_id"], ["user.id"], ),
                        sa.PrimaryKeyConstraint("id")
                        )
        op.execute(
            "INSERT INTO copr SELECT id,name,repos,created_on,build_count,owner_id FROM copr_1")
        op.drop_table("copr_1")
    else:
        op.drop_column("copr", u"chroots")
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column("copr", sa.Column(
        u"chroots", sa.TEXT(), nullable=False,
        server_default="fedora-rawhide-x86_64"))

    op.drop_table("copr_chroot")
    op.drop_table("mock_chroot")
    ### end Alembic commands ###
