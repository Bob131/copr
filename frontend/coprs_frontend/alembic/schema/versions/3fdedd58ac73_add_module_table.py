"""add module table

Revision ID: 3fdedd58ac73
Revises: 412c2c8d9da
Create Date: 2016-10-26 22:01:09.361070

"""

# revision identifiers, used by Alembic.
revision = '3fdedd58ac73'
down_revision = '412c2c8d9da'

from alembic import op
import sqlalchemy as sa

from coprs.models import Module, Action, Copr, User, Group
from sqlalchemy.orm import sessionmaker

import ujson as json
import base64
import modulemd
import yaml
from coprs.logic.coprs_logic import CoprsLogic
from coprs.logic.actions_logic import ActionsLogic
from coprs.helpers import ActionTypeEnum


def upgrade():
    bind = op.get_bind()
    Session = sessionmaker()
    session = Session(bind=bind)

    op.create_table(
        "module",
        sa.Column("id", sa.Integer, primary_key=True),
        sa.Column("name", sa.String(100), nullable=False),
        sa.Column("stream", sa.String(100), nullable=False),
        sa.Column("version", sa.Integer, nullable=False),
        sa.Column("summary", sa.String(100), nullable=False),
        sa.Column("description", sa.Text),
        sa.Column("created_on", sa.Integer, nullable=True),
        sa.Column("yaml_b64", sa.Text),
        sa.Column("copr_id", sa.Integer, sa.ForeignKey("copr.id")),
    )
    op.create_unique_constraint("unique_name_stream_version_copr_id", "module",
                                ["name", "stream", "version", "copr_id"])
    session.commit()

    # Now, let's seed the table with existing modules which are violently stored in the `action` table
    added_modules = set()
    for action in ActionsLogic.get_many(ActionTypeEnum("build_module")).order_by(Action.id.desc()):
        data = json.loads(action.data)
        if not "ownername" in data:
            continue # already new action format
        copr = get_copr(session, data["ownername"], data["projectname"])
        yml_str = base64.b64decode(data["modulemd_b64"])
        yml = yaml.safe_load(yml_str)

        mmd = modulemd.ModuleMetadata()
        mmd.name = yml["data"]["name"]
        mmd.stream = ""
        mmd.version = action.created_on
        mmd.summary = yml["data"]["summary"]

        if "filter" in yml["data"]["components"]["rpms"]:
            for package in yml["data"]["components"]["rpms"]["filter"]:
                mmd.filter.add_rpm(package)

        for package in yml["data"]["components"]["rpms"]["api"]:
            mmd.api.add_rpm(package)

        for profile_name in yml["data"]["profiles"]:
            mmd.profiles[profile_name] = modulemd.profile.ModuleProfile()
            for package in yml["data"]["profiles"][profile_name]["rpms"]:
                mmd.profiles[profile_name].add_rpm(package)

        module_kwargs = {
            "name": mmd.name,
            "stream": mmd.stream,
            "version": mmd.version,
            "summary": mmd.summary,
            "description": mmd.description,
            "yaml_b64": base64.b64encode(mmd.dumps()),
            "created_on": action.created_on,
            "copr_id": copr.id,
        }

        # There is no constraint for currently existing modules, but in new table, there
        # must be unique (copr, nsv). Therefore in the case of duplicit modules,
        # we will add only the newest one
        if full_module_name(copr, mmd) in added_modules:
            print("Skipping {}; Already exists".format(full_module_name(copr, mmd)))
            continue
        else:
            print("Adding {}".format(full_module_name(copr, mmd)))

        session.add(Module(**module_kwargs))
        added_modules.add(full_module_name(copr, mmd))


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('module')
    ### end Alembic commands ###


def full_module_name(copr, mmd):
    return "{}/{}-{}-{}".format(
        copr.full_name, mmd.name, mmd.stream, mmd.version
    )


def get_copr(session, ownername, projectname):
    if ownername[0] == "@":
        coprs = CoprsLogic.filter_by_group_name(session.query(Copr), ownername[1:])
    else:
        coprs = CoprsLogic.filter_by_user_name(session.query(Copr), ownername)
    return CoprsLogic.filter_by_name(coprs, projectname).first()
